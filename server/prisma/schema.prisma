// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  mentor
  censor
  manager
  admin
}

model Account {
  accountID String     @id @default(uuid())
  account   String     @unique
  password  String
  createAt  DateTime   @default(now())
  updateAt  DateTime   @default(now())
  UserInfo  UserInfo[]
}

model UserInfo {
  //property
  userID         String     @id @default(uuid())
  firstName      String
  lastName       String
  email          String?
  phoneNumber    String?
  country        String
  address        String
  role           Role       @default(user)
  //foreign key
  Posts          Post[]
  Document       Document[] @relation("user")
  Comment        Comment[]
  Star           Star[]
  Account        Account    @relation(fields: [accountID], references: [accountID])
  accountID      String
  MentorClass    Class?     @relation("mentor", fields: [mentorClassID], references: [classID])
  mentorClassID  String?
  studentClass   Class?     @relation("student", fields: [studentClassID], references: [classID])
  studentClassID String?
  Course         Course?    @relation(fields: [courseID], references: [courseID])
  courseID       String?
  //date time 
  createAt       DateTime   @default(now())
  updateAt       DateTime   @default(now())
  QAPost         QAPost[]
}

//ANCHOR - access
model Image {
  imageID            String    @id @default(uuid())
  post               Post      @relation(fields: [postID], references: [postID])
  postID             String
  imageUrl           String
  Document           Document? @relation(fields: [documentDocumentID], references: [documentID])
  documentDocumentID String?
  createAt           DateTime  @default(now())
  updateAt           DateTime  @default(now())
  QAPost             QAPost?   @relation(fields: [qAPostQapostID], references: [qapostID])
  qAPostQapostID     String?
}

model Video {
  videoID            String    @id @default(uuid())
  post               Post      @relation(fields: [postID], references: [postID])
  postID             String
  video_url          String
  Document           Document? @relation(fields: [documentDocumentID], references: [documentID])
  documentDocumentID String?
  createAt           DateTime  @default(now())
  updateAt           DateTime  @default(now())
  QAPost             QAPost?   @relation(fields: [qAPostQapostID], references: [qapostID])
  qAPostQapostID     String?
}

//ANCHOR - learning category
model LearningCategory {
  learningCategoryID          String     @id @default(uuid())
  learningCategoryName        String     @unique
  learningCategoryDescription String
  Class                       Class[]
  Course                      Course[]
  Document                    Document[]
  Post                        Post[]
  QAPost                      QAPost?    @relation(fields: [qAPostQapostID], references: [qapostID])
  qAPostQapostID              String?
}

//ANCHOR - post

model Post {
  postID        String             @id @default(uuid())
  title         String
  content       String
  userInfo      UserInfo?          @relation(fields: [userInfoID], references: [userID])
  userInfoID    String?
  category      LearningCategory[]
  like          Decimal            @default(0)
  star          Star[]
  comment       Comment[]
  image         Image[]
  video         Video[]
  PostStructure PostStructure?
  createAt      DateTime           @default(now())
  updateAt      DateTime           @default(now())
}

model PostStructure {
  postStructureID String   @id @default(uuid())
  Post            Post     @relation(fields: [postID], references: [postID])
  postID          String   @unique
  //TODO - thiet ke sau 
  createAt        DateTime @default(now())
  updateAt        DateTime @default(now())
}

model Star {
  starID     String    @id @default(uuid())
  userInfoID String
  point      Decimal
  user       UserInfo  @relation(fields: [userInfoID], references: [userID])
  Post       Post      @relation(fields: [postID], references: [postID])
  postID     String
  Document   Document? @relation(fields: [documentID], references: [documentID])
  documentID String?
  Class      Class?    @relation(fields: [classID], references: [classID])
  classID    String?
  Course     Course?   @relation(fields: [courseID], references: [courseID])
  courseID   String?
  createAt   DateTime  @default(now())
  updateAt   DateTime  @default(now())
}

model Comment {
  commentID      String   @id @default(uuid())
  userInfo       UserInfo @relation(fields: [userInfoID], references: [userID])
  userInfoID     String
  content        String
  like           Decimal
  Post           Post?    @relation(fields: [postID], references: [postID])
  postID         String?
  QAPost         QAPost?  @relation(fields: [qAPostQapostID], references: [qapostID])
  qAPostQapostID String?
  createAt       DateTime @default(now())
  updateAt       DateTime @default(now())
}

//ANCHOR - Q&APost
enum QAStatus {
  pending
  finish
}

enum QAType {
  error
  ask
}

model QAPost {
  qapostID   String             @id @default(uuid())
  title      String
  content    String
  QAType     QAType             @default(ask)
  status     QAStatus           @default(pending)
  userInfo   UserInfo?          @relation(fields: [userInfoID], references: [userID])
  userInfoID String?
  category   LearningCategory[]
  comment    Comment[]
  image      Image[]
  video      Video[]
  createAt   DateTime           @default(now())
  updateAt   DateTime           @default(now())
}

//ANCHOR - class
model Class {
  classID                        String             @id @default(uuid())
  mentor                         UserInfo[]         @relation("mentor")
  student                        UserInfo[]         @relation("student")
  star                           Star[]
  ClassStructure                 ClassStructure?
  briefDescription               String
  startDate                      DateTime
  endDate                        DateTime
  totalHours                     Float
  classCategory                  LearningCategory[]
  learningCategoryID             String
  classStructureClassStructureID String
  createAt                       DateTime           @default(now())
  updateAt                       DateTime           @default(now())
}

model ClassStructure {
  classStructureID String   @id @default(uuid())
  class            Class    @relation(fields: [classClassID], references: [classID])
  classClassID     String   @unique
  //TODO - thiet ke sau
  createAt         DateTime @default(now())
  updateAt         DateTime @default(now())
}

//ANCHOR - course
model Course {
  courseID           String             @id @default(uuid())
  learningCategoryID String
  briefDescription   String
  startDate          DateTime
  endDate            DateTime
  totalHours         Float
  attendance         UserInfo[]
  star               Star[]
  CourseStructure    CourseStructure?
  courseCategory     LearningCategory[]
  createAt           DateTime           @default(now())
  updateAt           DateTime           @default(now())
}

model CourseStructure {
  courseStructureID String   @id @default(uuid())
  Course            Course   @relation(fields: [courseCourseID], references: [courseID])
  courseCourseID    String   @unique
  //TODO - thiet ke sau
  createAt          DateTime @default(now())
  updateAt          DateTime @default(now())
}

//ANCHOR - document
model Document {
  documentID        String             @id @default(uuid())
  UserInfo          UserInfo?          @relation("user", fields: [userInfoID], references: [userID])
  userInfoID        String?
  category          LearningCategory[]
  readCount         Decimal
  star              Star[]
  image             Image[]
  video             Video[]
  DocumentStructure DocumentStructure?
  createAt          DateTime           @default(now())
  updateAt          DateTime           @default(now())
}

model DocumentStructure {
  documentStructureID String   @id @default(uuid())
  Documen             Document @relation(fields: [documentID], references: [documentID])
  documentID          String   @unique
  //TODO - thiet ke sau
  createAt            DateTime @default(now())
  updateAt            DateTime @default(now())
}
